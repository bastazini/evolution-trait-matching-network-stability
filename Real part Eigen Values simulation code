require(geiger)
require(plotrix)
require(picante)
require(bipartite)
require(igraph)
require(ggplot2)
require(lme4)
require(car)

runs <- 3000
power_H <- c(0.0001,1,2,5)
power_L <- c(0.0001,1,2,5)  # Now varying instead of being fixed
complementarity <- c(0.25, 0.5, 0.75, 1) #Trait complementary 

RESULTADOS <- data.frame(real_eigenvalue = numeric(),
                         power_H = numeric(),
                         power_L = numeric(),
                         complementarity = numeric())

contagem <- 0
for (p in complementarity) {
  for (o in power_H) {
    for (q in power_L) {
      for (m in 1:runs) {
        contagem <- contagem + 1
        n_spe_H <- sample(10:20, 1)
        n_spe_L <- sample(10:20, 1)
        
        tree_H <- sim.bdtree(b = 0.1, d = 0, stop = "taxa", n = n_spe_H, extinct = FALSE)
        tree_L <- sim.bdtree(b = 0.1, d = 0, stop = "taxa", n = n_spe_L, extinct = FALSE)
        tree_H$tip.label <- sprintf("H_%.3d", 1:length(tree_H$tip.label))
        tree_L$tip.label <- sprintf("L_%.3d", 1:length(tree_L$tip.label))
        
        trait_H <- rTraitCont(compute.brlen(tree_H, power = o), model = "BM")
        trait_H <- rescale(trait_H, c(0, 1))
        trait_L <- rTraitCont(compute.brlen(tree_L, power = q), model = "BM")
        trait_L <- rescale(trait_L, c(0, 1))
        
        d_H <- matrix(runif(n_spe_H, max = p), nrow = n_spe_L, ncol = n_spe_H, byrow = TRUE)
        d_L <- matrix(runif(n_spe_L, max = p), nrow = n_spe_L, ncol = n_spe_H, byrow = FALSE)
        web <- outer(trait_L, trait_H, FUN = function(x, y) abs(x - y) < 0.5 * (d_H + d_L))
        web <- ifelse(web, 1, 0)
        
        z_H <- which(colSums(web) == 0)
        if (length(z_H) > 0) {
          for (i in z_H) web[sample(1:n_spe_L, 1), i] <- 1
        }
        z_L <- which(rowSums(web) == 0)
        if (length(z_L) > 0) {
          for (i in z_L) web[i, sample(1:n_spe_H, 1)] <- 1
        }
        
        # Ensure the matrix is square by converting to adjacency matrix format
        max_size <- max(n_spe_H, n_spe_L)
        web_square <- matrix(0, nrow = max_size, ncol = max_size)
        web_square[1:n_spe_L, 1:n_spe_H] <- web
        
        eigenvalues <- eigen(web_square)$values
        real_eigenvalue <- max(Re(eigenvalues))  # Pegando a parte real do maior autovalor
        
        RESULTADOS <- rbind(RESULTADOS, data.frame(real_eigenvalue = real_eigenvalue,
                                                   power_H = o,
                                                   power_L = q,
                                                   complementarity = p))
      }
    }
  }
}

# Statistical test using linear mixed model
model <- lmer(real_eigenvalue ~ power_H * power_L * complementarity + (1|power_H) + (1|power_L), data = RESULTADOS)
anova_results <- Anova(model, type = "III")
print(anova_results)

# Contour plot
ggplot(RESULTADOS, aes(x = power_H, y = power_L, z = real_eigenvalue)) +
  geom_contour_filled() +
  geom_point(alpha = 0.0) +  # Add scatter points for better visualization
  labs(
    title = "Contour Plot: Phylogenetic Signal and Stability",
    x = "Phylogenetic Signal (Power H)",
    y = "Phylogenetic Signal (Power L)",
    fill = "Real Part of  Eigenvalue (Stability)"
  ) +
  theme_minimal()

ggplot(RESULTADOS, aes(x = as.factor(power_H), y = real_eigenvalue, fill = as.factor(complementarity))) +
  geom_violin() +  # Change to a violin plot
  geom_jitter(aes(color = as.factor(complementarity)), width = 0.15, alpha = 0.5) +  # Add points inside the violin plot
  facet_wrap(~ as.factor(power_L)) +  # Facet by power_L
  labs(title = "Stability",
       x = "Phylogenetic Signal Higher trophic level", 
       y = "Real Part of  Eigenvalues (Stability)",
       fill = "Complementarity",
       color = "Complementarity") +  # Add color label for points
  theme_minimal() +  # Clean theme
  coord_flip()  # Make it horizontal

ggplot(RESULTADOS, aes(x = as.factor(power_H), y = real_eigenvalue, fill = as.factor(complementarity))) +
  geom_violin() +  # Change to a violin plot
  facet_wrap(~ as.factor(power_L)) +  # Facet by power_L
  labs(title = "Stability as a Function of Phylogenetic Signal and Complementarity",
       x = "Phylogenetic Signal Higher trophic level", 
       y = "Real Eigenvalue (Stability)",
       fill = " Trait Complementarity") +
  theme_minimal() +  # Clean theme
  coord_flip()  # Make it horizontal

